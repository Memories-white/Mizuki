<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Memories_white的博客</title><description>基于Astro框架</description><link>https://www.zfps.asia/</link><language>zh_CN</language><item><title>部署搭建LAMP-LNMP-WordPress</title><link>https://www.zfps.asia/posts/lamp-lnmp-wordpress/</link><guid isPermaLink="true">https://www.zfps.asia/posts/lamp-lnmp-wordpress/</guid><description>使用CentOS7部署搭建LAMP-LNMP-WordPress</description><pubDate>Tue, 10 Jun 2025 17:18:24 GMT</pubDate><content:encoded>&lt;h3&gt;前言&lt;/h3&gt;
&lt;p&gt;&amp;lt;h3&amp;gt;如果你发现安装不了第一步的包时你需要去看上一篇文档的换源操作&amp;lt;/h3&amp;gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;安装必要软件包&lt;/h3&gt;
&lt;h4&gt;系统工具包&lt;/h4&gt;
&lt;p&gt;&amp;lt;h4&amp;gt;包含 wget vim 两种包&amp;lt;/h4&amp;gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#安装wget vim
yum install wget vim epel-release -y
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;安装 Apache Web 服务器&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;#安装 Apache
yum install httpd -y

c
systemctl start httpd
systemctl enable httpd

# 配置防火墙
firewall-cmd --permanent --add-service=http
firewall-cmd --permanent --add-service=https
firewall-cmd --reload
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;安装 MariaDB 数据库&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;#安装 MariaDB
yum install mariadb-server -y

#设置开机自启
systemctl start mariadb
systemctl enable mariadb

# 安全初始化（设置root密码，移除匿名用户等）
mysql_secure_installation
&lt;/code&gt;&lt;/pre&gt;
&lt;h5&gt;安全初始化说明&lt;/h5&gt;
&lt;p&gt;部分直接使用翻译是否启用自行斟酌
这里可能需要登录,默认密码为空直接回车即可&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#这里是问你是否重置或创建新密码
Setting the root password ensures that nobody can log into the MariaDB
root user without the proper authorisation.

#这里直接选择是y
Set root password? [Y/n] y
New password:
Re-enter new password:
Password updated successfully!
Reloading privilege tables..
#创建成功提示
 ... Success!


By default, a MariaDB installation has an anonymous user, allowing anyone
to log into MariaDB without having to have a user account created for
them.  This is intended only for testing, and to make the installation
go a bit smoother.  You should remove them before moving into a
production environment.
#默认情况下，MariaDB 安装会有一个匿名用户，这使得任何人无需创建用户账户即可登录 MariaDB。这仅用于测试目的，以使安装过程更顺畅一些。在进入生产环境之前，你应该删除这些匿名用户。

Remove anonymous users? [Y/n] n
 ... skipping.

Normally, root should only be allowed to connect from &apos;localhost&apos;.  This
ensures that someone cannot guess at the root password from the network.
#通常情况下，应该只允许 root 从 “localhost” 进行连接。这能确保没有人能从网络上猜出 root 密码。

Disallow root login remotely? [Y/n] n
 ... skipping.

By default, MariaDB comes with a database named &apos;test&apos; that anyone can
access.  This is also intended only for testing, and should be removed
before moving into a production environment.
#默认情况下，MariaDB 带有一个名为 “test” 的数据库，任何人都可以访问。此数据库仅用于测试目的，在进入生产环境之前应将其删除。

Remove test database and access to it? [Y/n] n
 ... skipping.

Reloading the privilege tables will ensure that all changes made so far
will take effect immediately.
#重新加载权限表将确保到目前为止所做的所有更改立即生效。

Reload privilege tables now? [Y/n] n
 ... skipping.

Cleaning up...


#全部准备好后出现这个提示则表示成功
All done!  If you&apos;ve completed all of the above steps, your MariaDB
installation should now be secure.

Thanks for using MariaDB!
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;安装 PHP 7.4&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;# 添加Remi源
wget http://rpms.remirepo.net/enterprise/remi-release-7.rpm
rpm -Uvh remi-release-7.rpm
yum update -y

# 安装PHP 7.4及扩展
yum --enablerepo=remi-php74 install php php-cli php-fpm php-mysqlnd php-gd php-json php-mbstring php-xml php-zip -y

# 验证PHP版本
php -v  # 应显示PHP 7.4.x
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;下载并安装 WordPress&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;cd /tmp
wget https://cn.wordpress.org/latest-zh_CN.tar.gz
tar -xzf latest-zh_CN.tar.gz

# 复制文件到Web根目录
cp -r wordpress/* /var/www/html/
chown -R apache:apache /var/www/html/
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;配置 PHP 与 Apache 集成&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# 编辑Apache配置文件
vim /etc/httpd/conf/httpd.conf

# 在文件中添加以下内容（在LoadModule区域后）
# LoadModule 后的内容视版本决定，你是什么版本就选择那个版本
LoadModule php_module modules/libphp.so #8.x版本
LoadModule php7_module modules/libphp7.so #7.x版本
AddHandler php-script .php
DirectoryIndex index.php index.html

# 重启Apache
systemctl restart httpd
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;验证 LAMP 环境&lt;/h3&gt;
&lt;h4&gt;创建 phpinfo.php 测试文件&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;#创建文件并写入
echo &quot;&amp;lt;?php phpinfo(); ?&amp;gt;&quot; &amp;gt; /var/www/html/phpinfo.php
#赋予权限
chown apache:apache /var/www/html/phpinfo.php

#成功后访问地址
http://你的ip地址/phpinfo.php
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;示例图
&lt;img src=&quot;https://www.zfps.asia/images/%E6%95%99%E7%A8%8B/LAMP-WordPress/PHP.png&quot; alt=&quot;LAMP&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;WordPress 部署&lt;/h3&gt;
&lt;h4&gt;创建 WordPress 数据库&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;# 登录MySQL（使用之前设置的root密码）
mysql -u root -p

# 创建WordPress数据库和用户（wordpress为数据库名）
CREATE DATABASE wordpress DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
CREATE USER &apos;用户名&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;数据库密码&apos;;
GRANT ALL PRIVILEGES ON wordpress.* TO &apos;用户名&apos;@&apos;localhost&apos;;
FLUSH PRIVILEGES;
EXIT;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;配置 WordPress&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;# 创建配置文件
cd /var/www/html
cp wp-config-sample.php wp-config.php
vim wp-config.php

# 修改以下配置（找到对应行并替换）（wordpress为数据库名，需要填上你上面那个步骤创建的数据库）
define(&apos;DB_NAME&apos;, &apos;wordpress&apos;);
define(&apos;DB_USER&apos;, &apos;用户名&apos;);
define(&apos;DB_PASSWORD&apos;, &apos;你的密码&apos;);
define(&apos;DB_HOST&apos;, &apos;localhost&apos;);

# 可选：添加安全密钥（从https://api.wordpress.org/secret-key/1.1/salt/生成）
# 直接复制生成的内容替换下面的部分
define(&apos;AUTH_KEY&apos;,         &apos;put your unique phrase here&apos;);
define(&apos;SECURE_AUTH_KEY&apos;,  &apos;put your unique phrase here&apos;);
define(&apos;LOGGED_IN_KEY&apos;,    &apos;put your unique phrase here&apos;);
define(&apos;NONCE_KEY&apos;,        &apos;put your unique phrase here&apos;);
define(&apos;AUTH_SALT&apos;,        &apos;put your unique phrase here&apos;);
define(&apos;SECURE_AUTH_SALT&apos;, &apos;put your unique phrase here&apos;);
define(&apos;LOGGED_IN_SALT&apos;,   &apos;put your unique phrase here&apos;);
define(&apos;NONCE_SALT&apos;,       &apos;put your unique phrase here&apos;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;进入 WordPress 安装向导&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;http://你的ip地址/wp-admin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;lt;h3&amp;gt;后台管理界面&amp;lt;/h3&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.zfps.asia/images/%E6%95%99%E7%A8%8B/LAMP-WordPress/WordPress.png&quot; alt=&quot;WordPress&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;LNMP 环境部署&lt;/h3&gt;
&lt;h4&gt;安装 Nginx&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;# 添加Nginx官方源
cat &amp;gt; /etc/yum.repos.d/nginx.repo &amp;lt;&amp;lt; EOF
[nginx]
name=nginx repo
baseurl=http://nginx.org/packages/centos/7/\$basearch/
gpgcheck=0
enabled=1
EOF

# 安装Nginx
yum install nginx -y

# 启动并设置开机自启
systemctl start nginx
systemctl enable nginx

# 配置防火墙
firewall-cmd --permanent --add-service=http
firewall-cmd --permanent --add-service=https
firewall-cmd --reload
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;配置 Nginx 与 PHP-FPM&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;#创建 Nginx 虚拟主机配置
vim /etc/nginx/conf.d/wordpress.conf


#内容
server {
    listen 80; #这里的端口视情况调整，如果有Apache则调整端口号
    server_name 192.168.0.0;  # 修改为您的域名或IP
    root /var/www/html;
    index index.php index.html;

    location / {
        try_files $uri $uri/ /index.php?$args;
    }

    # PHP-FPM处理PHP文件
    location ~ \.php$ {
        fastcgi_pass 127.0.0.1:9000;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include fastcgi_params;
    }

    # 禁止访问敏感文件
    location ~ /\.ht {
        deny all;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#验证 Nginx 配置
nginx -t
#重启 nginx php-fpm
systemctl restart nginx php-fpm
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;验证 PHP 与 Nginx 集成&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;#创建文件验证是否成功
echo &quot;&amp;lt;?php phpinfo(); ?&amp;gt;&quot; &amp;gt; /var/www/html/info.php

#浏览器输入
http://你的ip地址/info.php
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;WordPress 在 LNMP 环境下的配置&lt;/h3&gt;
&lt;h4&gt;确保数据库已创建（如果之前已创建可跳过）&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;mysql -u root -p
CREATE DATABASE wordpress DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
CREATE USER &apos;用户名&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;密码&apos;;
GRANT ALL PRIVILEGES ON wordpress.* TO &apos;用户名&apos;@&apos;localhost&apos;;
FLUSH PRIVILEGES;
EXIT;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#配置 WordPress 文件权限
chown -R nginx:nginx /var/www/html
chmod -R 755 /var/www/html

#浏览器访问
http://你的ip地址/wp-admin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;出现后台界面即为成功&lt;/p&gt;
</content:encoded></item><item><title>NFS Server实现web01、web02站点的数据共享</title><link>https://www.zfps.asia/posts/centos7_experiment/</link><guid isPermaLink="true">https://www.zfps.asia/posts/centos7_experiment/</guid><description>使用CentOS7实现通过NFS Server实现web01、web02站点的数据共享</description><pubDate>Mon, 09 Jun 2025 14:25:22 GMT</pubDate><content:encoded>&lt;h3&gt;说明&lt;/h3&gt;
&lt;p&gt;全部虚拟机只有两个步骤相同操作,四台虚拟机进行换源操作并关闭防火墙.实验准备中表格中的节点名称可以按照自己的需求更改,IP 地址视情况更改,Node2-3 为部署 web 站点,这里只展示一台的步骤,两台的步骤相同.&lt;/p&gt;
&lt;h4&gt;实验图&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://www.zfps.asia/images/%E6%95%99%E7%A8%8B/CentOS7_experiment/experiment.png&quot; alt=&quot;nginx实验图&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;实验准备&lt;/h3&gt;
&lt;h4&gt;实验需准备四台虚拟机,以下视情况进行更改.&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;节点名称&lt;/th&gt;
&lt;th&gt;IP 地址&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;node01&lt;/td&gt;
&lt;td&gt;192.168.100.134&lt;/td&gt;
&lt;td&gt;负载均衡器（部署 Nginx 反向代理）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;node02&lt;/td&gt;
&lt;td&gt;192.168.100.135&lt;/td&gt;
&lt;td&gt;Web 站点 1（Nginx + NFS 挂载）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;node03&lt;/td&gt;
&lt;td&gt;192.168.100.136&lt;/td&gt;
&lt;td&gt;Web 站点 2（Nginx + NFS 挂载）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;node04&lt;/td&gt;
&lt;td&gt;192.168.100.137&lt;/td&gt;
&lt;td&gt;NFS 服务器（提供共享存储）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;Node1-4 换源操作,并关闭防火墙&lt;/h3&gt;
&lt;p&gt;这里的操作是需要对四台虚拟机进行的操作&lt;/p&gt;
&lt;h4&gt;备份默认源&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;sudo cp /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;进行换源操作,这里使用阿里云源,需要使用其他源也可以换成别的&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;阿里云源&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;清华大学源&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.tuna.tsinghua.edu.cn/repo/Centos-7.repo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;网易源&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.163.com/.help/CentOS7-Base-163.repo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;中科大源&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.ustc.edu.cn/centos/7/os/x86_64/
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;清理 yum 源&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;sudo yum clean all
sudo yum makecache
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;验证是否有效&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;sudo yum repolist
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;关闭防火墙&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;systemctl stop firewalld.service
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Node4 操作&lt;/h3&gt;
&lt;h4&gt;安装 NFS 服务&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;yum install -y nfs-utils rpcbind
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;创建共享目录并设置权限&lt;/h4&gt;
&lt;p&gt;创建共享目录，用于存放 Web 站点需共享的数据&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir -p /data/nfs_share
chown -R nfsnobody:nfsnobody /data/nfs_share
chmod -R 755 /data/nfs_share
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;配置 NFS 共享规则&lt;/h4&gt;
&lt;p&gt;编辑 /etc/exports 文件，添加共享配置，允许指定网段访问共享目录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo &quot;/data/nfs_share 192.168.100.0/24(rw,sync,no_root_squash)&quot; &amp;gt;&amp;gt; /etc/exports
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中，192.168.100.0/24 表示允许该网段内节点访问，rw 为读写权限，sync 保障数据同步写入，no_root_squash 允许客户端以 root 身份访问（生产环境可按需调整为更严格权限 ）&lt;/p&gt;
&lt;h4&gt;启动服务并设置开机自启&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;systemctl start rpcbind nfs
systemctl enable rpcbind nfs
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;验证 NFS 服务是否生效&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;showmount -e localhost
# 正常输出示例：
# Export list for localhost:
# /data/nfs_share 192.168.100.0/24
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Node2-3 部署 Web 服务（数据同步依赖 NFS 挂载 ）&lt;/h3&gt;
&lt;h4&gt;安装 Nginx 所需要的环境&lt;/h4&gt;
&lt;p&gt;由于 CentOS7 没办法使用命令方式直接安装,只能使用编译安装,所以这里使用的是编译安装,其他相同或版本默认安装路径不同,如果使用包管理器安装 Nginx 路径为:&lt;code&gt;/usr/share/nginx/&lt;/code&gt;,使用编译安装的路径为:&lt;code&gt;/usr/local/nginx&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
#安装 nginx 需要先将官网下载的源码进行编译，编译依赖 gcc 环境
yum install gcc-c++
#pcre是一个perl库，包括perl兼容的正则表达式库，nginx的http模块使用pcre来解析正则表达式，所以需要安装pcre库
yum install -y pcre pcre-devel
#zlib库提供了很多种压缩和解压缩方式nginx使用zlib对http包的内容进行gzip，所以需要安装
yum install -y zlib zlib-devel
#nginx 不仅支持 http 协议，还支持 https（即在ssl协议上传输http），所以需要在 Centos 安装 OpenSSL 库
yum install -y openssl openssl-devel
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;安装 Nginx&lt;/h4&gt;
&lt;p&gt;这里使用的是编译安装,需要先在官网下载包到本地解压进行编译安装&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#进入usr下的local目录
cd usr/local
#在local目录下创建 nginx 文件夹
mkdir nginx
#进入nginx目录
cd nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通过 wget 下载 nginx 安装包&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget https://nginx.org/download/nginx-1.22.1.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;解压并加入目录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tar -zxvf nginx-1.22.1.tar.gz
cd nginx-1.22.1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;配置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;编译安装&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#编译
make
#安装
make install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;启动 nginx 服务,附关闭命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;###启动服务
#需要先进入sbin目录下
cd /usr/local/nginx/sbin
#启动nginx服务
./nginx

###关闭服务
#需要先进入sbin目录下
cd /usr/local/nginx/sbin
#关闭nginx服务
./nginx -s stop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;配置 nginx 配置环境变量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vim /etc/profile

####在最后一行添加
export PATH=$PATH:/usr/local/nginx/sbin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;定位到服务目录下并使配置生效&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /usr/local/nginx/sbin
source /etc/profile
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;浏览器输入 Node4 服务器 ip 出现如下画面为成功
&lt;img src=&quot;https://www.zfps.asia/images/%E6%95%99%E7%A8%8B/CentOS7_experiment/node4success.png&quot; alt=&quot;node4站点图&quot; /&gt;&lt;/p&gt;
&lt;h4&gt;Node2-3 部署 Web 站点&lt;/h4&gt;
&lt;h5&gt;挂载 NFS 共享目录&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;#安装 NFS 服务
yum install -y nfs-utils

# 手动挂载（测试用）
mount -t nfs 192.168.100.137:/data/nfs_share /usr/share/nginx/html

# 设置开机自动挂载，编辑 /etc/fstab 文件
echo &quot;192.168.100.137:/data/nfs_share /usr/share/nginx/html nfs defaults 0 0&quot; &amp;gt;&amp;gt; /etc/fstab
mount -a  # 使挂载配置立即生效，无报错则挂载成功
&lt;/code&gt;&lt;/pre&gt;
&lt;h5&gt;启动 Nginx 并设置开机自启&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;systemctl start nginx
systemctl enable nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;h5&gt;验证数据同步&lt;/h5&gt;
&lt;p&gt;在 NFS 服务端（node04 节点 ）的共享目录创建测试文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo &quot;Hello from NFS Share!&quot; &amp;gt; /data/nfs_share/index.html
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在 node02、node03 节点，通过 curl 命令访问本地 Nginx 服务，验证数据是否同步&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl 127.0.0.1
# 应输出 &quot;Hello from NFS Share!&quot;，说明数据同步成功
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Node1 部署负载均衡（采用 Nginx 反向代理 ）&lt;/h3&gt;
&lt;h4&gt;安装 Nginx,这里安装 Nginx 同上面的 Node2-3 操作相同故不演示&lt;/h4&gt;
&lt;h4&gt;配置负载均衡规则&lt;/h4&gt;
&lt;p&gt;编辑 /usr/local/nginx/conf.d/loadbalance.conf 文件（若无则新建 ），添加负载均衡配置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;upstream web_servers {
    server 192.168.100.135;  # Web01 节点（node02）
    server 192.168.100.136;  # Web02 节点（node03）
    # 可按需添加负载均衡策略，如 weight（权重）、ip_hash（会话保持）等，默认轮询策略
}

server {
    listen 80;
    server_name localhost;

    location / {
        proxy_pass http://web_servers;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;重启 Nginx&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/usr/local/nginx/sbin/nginx -s reload
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;启动 Nginx 并验证&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;systemctl start nginx
systemctl enable nginx

nginx -t  # 检查配置语法，输出 &quot;syntax is ok&quot; 则配置正常
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;测试负载均衡功能，在 node01 节点或客户端执行 curl 命令&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;curl 127.0.0.1
# 应返回 Web 节点的测试内容，多次执行可观察请求转发情况
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;系统可用性测试&lt;/h3&gt;
&lt;h4&gt;客户端访问测试&lt;/h4&gt;
&lt;p&gt;在同网段的客户端（如本地电脑浏览器、其他虚拟机 ），访问负载均衡器（node01 ）的 IP 地址&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://192.168.0.100
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;预期显示 Hello from NFS Share!（与 Web 节点内容一致 ）。多次刷新页面，可验证负载均衡是否按策略（默认轮询 ）转发请求，也可查看 Nginx 访问日志确认：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat /var/log/nginx/access.log
&lt;/code&gt;&lt;/pre&gt;
</content:encoded></item><item><title>域名绑定SSL教程</title><link>https://www.zfps.asia/posts/ssl/</link><guid isPermaLink="true">https://www.zfps.asia/posts/ssl/</guid><description>nginx域名配置SSL教程</description><pubDate>Thu, 17 Apr 2025 10:15:40 GMT</pubDate><content:encoded>&lt;h3&gt;域名绑定 SSL&lt;/h3&gt;
&lt;p&gt;这里仅演示 Nginx 的配置方法。首先，你需要到阿里云或其他域名服务商购买 SSL 证书。下面会展示阿里云的免费申请步骤，较为简单的申请途径还有 &lt;a href=&quot;https://httpsok.com/&quot;&gt;httpsok&lt;/a&gt;。&lt;/p&gt;
&lt;h4&gt;域名 SSL 申请&lt;/h4&gt;
&lt;h5&gt;阿里云&lt;/h5&gt;
&lt;p&gt;首先访问这个链接 &lt;a href=&quot;https://yundun.console.aliyun.com/?spm=5176.100251.111252.41.5fb44f15MZPMGP&amp;amp;p=cas#/certExtend/free/cn-hangzhou?currentPage=1&amp;amp;pageSize=10&amp;amp;keyword=&amp;amp;statusCode=&quot;&gt;阿里云 SSL 证书&lt;/a&gt;。购买成功后，如下图所示，点击“更多”，在里面下载 Nginx 证书。
&lt;img src=&quot;https://www.zfps.asia/images/%E6%95%99%E7%A8%8B/SSL/%E9%98%BF%E9%87%8C%E4%BA%91SSL.png&quot; alt=&quot;阿里云 SSL 证书&quot; /&gt;&lt;/p&gt;
&lt;h5&gt;httpsok&lt;/h5&gt;
&lt;p&gt;进入 &lt;a href=&quot;https://httpsok.com/&quot;&gt;httpsok&lt;/a&gt; 官网，注册成功后，直接进入申请免费 SSL 的流程。
&lt;img src=&quot;https://www.zfps.asia/images/%E6%95%99%E7%A8%8B/SSL/httpsok.png&quot; alt=&quot;httpsok&quot; /&gt;&lt;/p&gt;
&lt;p&gt;输入域名后会进行 DNS 解析，这里的主机记录和记录值需要到 DNS 服务商处设置，一般是 CNAME 记录，就像图中的记录类型一样。之后，从 httpsok 复制主机记录和记录值并粘贴到相应位置，然后点击“提交”即可。
&lt;img src=&quot;https://www.zfps.asia/images/%E6%95%99%E7%A8%8B/SSL/httpsokzs.png&quot; alt=&quot;httpsok zs&quot; /&gt;
&lt;img src=&quot;https://www.zfps.asia/images/%E6%95%99%E7%A8%8B/SSL/httpsokDNS.png&quot; alt=&quot;httpsok DNS&quot; /&gt;&lt;/p&gt;
&lt;h4&gt;上传证书&lt;/h4&gt;
&lt;p&gt;首先，在服务器上找到 Nginx 的安装路径，这里我的路径是 &lt;code&gt;/etc/nginx/&lt;/code&gt;，在 Nginx 目录下创建 &lt;code&gt;cert&lt;/code&gt; 文件夹。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir /etc/nginx/cert
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;完成以上步骤后，找到你下载好的证书（.zip 格式），压缩包里有两个文件，分别是以 &lt;code&gt;.pem&lt;/code&gt; 结尾的证书和以 &lt;code&gt;.key&lt;/code&gt; 结尾的密钥。将这两个文件解压出来，上传到服务器。这里以 &lt;code&gt;scp&lt;/code&gt; 命令为例，在证书文件目录下打开命令提示符（CMD），输入以下命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;scp * root@你的服务器公网ip:/etc/nginx/cert
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://www.zfps.asia/images/%E6%95%99%E7%A8%8B/SSL/scp.png&quot; alt=&quot;scp&quot; /&gt;&lt;/p&gt;
&lt;h4&gt;配置 Nginx&lt;/h4&gt;
&lt;p&gt;在修改 &lt;code&gt;nginx.conf&lt;/code&gt; 配置文件之前，先备份一份配置文件，输入 &lt;code&gt;cp&lt;/code&gt; 命令，之后打开配置文件。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.bak
vim nginx.conf # 打开配置文件
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在 &lt;code&gt;nginx.conf&lt;/code&gt; 中添加以下配置信息，服务器端口需要打开 443。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# HTTPS server
server {
    listen       443 ssl;  # 监听 443 端口
    server_name  这里填域名;

    ssl_certificate      cert/这里填你的证书文件名.pem;
    ssl_certificate_key  cert/这里填你的密钥文件名.key;

    ssl_session_timeout  5m;

    ssl_ciphers  HIGH:!aNULL:!MD5;

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

    ssl_prefer_server_ciphers  on;

    root /home/www/blog;   # 这里填你的网站目录
    index index.html index.php;
    location / {

    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;配置完成之后，保存文件，使用 Nginx 的命令测试一下配置文件是否正确：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nginx -t
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果输出结果没有错误，如下所示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok
nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后重新加载 Nginx 配置文件：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nginx -s reload
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;至此，配置就完成了。接下来，你只需访问你的网站，查看左上角的小锁，就能看到 SSL 证书的绿色锁标志了。
&lt;img src=&quot;https://www.zfps.asia/images/%E6%95%99%E7%A8%8B/SSL/SSL%E8%AF%81%E4%B9%A6.png&quot; alt=&quot;SSL 证书&quot; /&gt;&lt;/p&gt;
</content:encoded></item><item><title>阿里云搭建hexo</title><link>https://www.zfps.asia/posts/hexo-ailiyun/</link><guid isPermaLink="true">https://www.zfps.asia/posts/hexo-ailiyun/</guid><description>使用阿里云搭建hexo博客教程</description><pubDate>Wed, 16 Apr 2025 17:50:41 GMT</pubDate><content:encoded>&lt;h3&gt;本教程基于 阿里云 Centos7&lt;/h3&gt;
&lt;h3&gt;前置条件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;阿里云账号&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;域名&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;云服务器&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本教程会大概告诉你遇到的一些问题、解决方法、注意事项以及相关链接，希望能帮到你。有关服务器购买以及域名的内容，这里只会初略带过，这里跳过服务器购买，直接从域名开始。&lt;/p&gt;
&lt;h3&gt;域名购买以及备案后&lt;/h3&gt;
&lt;p&gt;首先去解析 DNS 服务，这里以阿里云为例。
&lt;img src=&quot;https://www.zfps.asia/images/%E6%95%99%E7%A8%8B/DNS.png&quot; alt=&quot;域名解析&quot; /&gt;
点击快速添加解析，然后勾选必要选项即可。网站的 IP 地址为你服务器的公网 IP。完成以上操作后，你会看到像上面截图那样多出来两个选项。至此，你的域名就准备完成了。&lt;/p&gt;
&lt;h3&gt;本地主机配置&lt;/h3&gt;
&lt;h4&gt;安装 Node.js&lt;/h4&gt;
&lt;p&gt;浏览器进入 &lt;a href=&quot;https://nodejs.org/zh-cn&quot;&gt;NodeJS 官网&lt;/a&gt;，点击下载 Node.js(LTS 版本)安装包。验证 Node.js 是否安装成功：按下 &lt;code&gt;win+r&lt;/code&gt; 进入 cmd 窗口，输入 &lt;code&gt;node -v&lt;/code&gt;，出现版本号即为安装成功。如果不成功，就需要去环境变量中添加 Node.js 的安装路径，或者重新安装 Node.js。
&lt;img src=&quot;https://www.zfps.asia/images/%E6%95%99%E7%A8%8B/Node.png&quot; alt=&quot;Node&quot; /&gt;&lt;/p&gt;
&lt;h4&gt;安装 Hexo&lt;/h4&gt;
&lt;p&gt;在 cmd 窗口输入以下命令安装 Hexo：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install hexo-cli -g
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;完成后输入 &lt;code&gt;hexo -v&lt;/code&gt; 验证是否安装成功。出现下图就说明安装成功。
&lt;img src=&quot;https://www.zfps.asia/images/%E6%95%99%E7%A8%8B/hexo.png&quot; alt=&quot;hexo&quot; /&gt;&lt;/p&gt;
&lt;h4&gt;初始化根目录&lt;/h4&gt;
&lt;p&gt;你需要自己找个地方创建文件夹，尽可能使用英文路径。例如像这样：
&lt;img src=&quot;https://www.zfps.asia/images/%E6%95%99%E7%A8%8B/hexo-folder.png&quot; alt=&quot;hexo-folder&quot; /&gt;
你不一定要跟示例一样，这个路径你自己找个熟悉的地方存放即可。文件夹名称随意，但不要用中文。在文件夹根目录下打开 cmd 窗口，然后输入 &lt;code&gt;hexo init&lt;/code&gt;，然后回车。这里可能会出现警告信息，不用管它，只要目录下有相关文件就行。
&lt;img src=&quot;https://www.zfps.asia/images/%E6%95%99%E7%A8%8B/hexo-init.png&quot; alt=&quot;hexo-init&quot; /&gt;
&lt;img src=&quot;https://www.zfps.asia/images/%E6%95%99%E7%A8%8B/hexo-tage.png&quot; alt=&quot;hexo-tage&quot; /&gt;&lt;/p&gt;
&lt;h4&gt;完成以上步骤后就能打开服务器了&lt;/h4&gt;
&lt;p&gt;输入以下命令（生成静态文件，并开启本地服务器）：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hexo g&amp;amp;&amp;amp;hexo s
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://www.zfps.asia/images/%E6%95%99%E7%A8%8B/hexo-g.png&quot; alt=&quot;hexo-g&quot; /&gt;
在浏览器中打开 &lt;code&gt;http://localhost:4000&lt;/code&gt;，即可看到初始的博客页面。出现以下画面说明本地部署已经成功。
&lt;img src=&quot;https://www.zfps.asia/images/%E6%95%99%E7%A8%8B/hexo-s.png&quot; alt=&quot;hexo-s&quot; /&gt;&lt;/p&gt;
&lt;p&gt;至此，本地主机配置完成。&lt;/p&gt;
&lt;h3&gt;服务器配置&lt;/h3&gt;
&lt;p&gt;如果出现安装问题，可以去最底下的相关链接查看解决方法。&lt;/p&gt;
&lt;h4&gt;安装 nginx&lt;/h4&gt;
&lt;p&gt;首先切换到 root 用户：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo su root
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装 nginx（nginx 不在默认的 yum 源中，需要改用别的源）：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo yum install epel-release
sudo yum install nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;完成后启动 nginx：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systemctl start nginx # 启动服务
systemctl enable nginx # 设为开机自启
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;建立博客根目录&lt;/h4&gt;
&lt;p&gt;将博客的页面文件放在 &lt;code&gt;/home/www/blog/&lt;/code&gt; 路径下，需要先创建这些文件，然后再给文件夹赋权限：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /home
mkdir www
cd www
mkdir blog
chmod 777 /home/www/blog
chmod 777 /home/www
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查看创建的路径：
&lt;img src=&quot;https://www.zfps.asia/images/%E6%95%99%E7%A8%8B/hexo-path.png&quot; alt=&quot;hexo-path&quot; /&gt;&lt;/p&gt;
&lt;h4&gt;配置 nginx&lt;/h4&gt;
&lt;p&gt;建立了博客的根目录后，需要将 nginx 服务器指向这个根目录地址，才能访问到博客页面，所以需要修改 nginx 的配置文件。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /etc/nginx
ls
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果有这个配置文件说明 nginx 已经安装成功了，如果没有，那可能你安装失败了。
&lt;img src=&quot;https://www.zfps.asia/img/%E6%95%99%E7%A8%8B/nginx-config.png&quot; alt=&quot;nginx-config&quot; /&gt;
创建 &lt;code&gt;vhosts&lt;/code&gt; 文件夹：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /etc/nginx
mkdir vhost
cd vhost
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输入 &lt;code&gt;vim blog.conf&lt;/code&gt; 新建 &lt;code&gt;blog.conf&lt;/code&gt; 文件并编辑内容：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server {
    listen 80;
    root /home/www/blog;
    server_name 这里改成你的域名;
    location / {
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;保存退出，然后输入 &lt;code&gt;nginx -t&lt;/code&gt; 检查配置文件是否有误，如果没有错误，输入 &lt;code&gt;nginx -s reload&lt;/code&gt; 重启 nginx。
&lt;img src=&quot;https://www.zfps.asia/images/%E6%95%99%E7%A8%8B/nginx-blog.png&quot; alt=&quot;nginx-blog&quot; /&gt;
打开 &lt;code&gt;/etc/nginx/&lt;/code&gt; 目录下的 &lt;code&gt;nginx.conf&lt;/code&gt; 文件，添加下面一行代码，将刚才新建的配置文件引入进来。&lt;code&gt;*.conf&lt;/code&gt; 的意思是将 &lt;code&gt;vhost&lt;/code&gt; 文件夹下的所有 &lt;code&gt;.conf&lt;/code&gt; 后缀的文件都引入了进来。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;include /etc/nginx/vhost/*.conf;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://www.zfps.asia/images/%E6%95%99%E7%A8%8B/nginx-conf.png&quot; alt=&quot;nginx--conf&quot; /&gt;&lt;/p&gt;
&lt;h4&gt;安装 nodeJS&lt;/h4&gt;
&lt;p&gt;输入命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -sL https://rpm.nodesource.com/setup_10.x | bash -
yum install -y nodejs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装完成后执行 &lt;code&gt;node -v&lt;/code&gt; 和 &lt;code&gt;npm -v&lt;/code&gt;，如果打印版本号则安装成功。
&lt;img src=&quot;https://www.zfps.asia/images/%E6%95%99%E7%A8%8B/node-version.png&quot; alt=&quot;node-version&quot; /&gt;&lt;/p&gt;
&lt;h4&gt;配置服务端 Git&lt;/h4&gt;
&lt;p&gt;这一部分主要目的是本地电脑可以通过 ssh 方式连接到云服务器，然后就可以通过命令行方式将博客传到云服务器上。
首先安装 git：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yum install git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;配置 git 用户：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;adduser git # 添加 git 用户
passwd git # 设置密码
chmod 740 /etc/sudoers # 修改 sudoers 文件权限
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在 &lt;code&gt;vi /etc/sudoers&lt;/code&gt; 打开的文件中，找到合适位置添加如下命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git ALL=(ALL) ALL
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://www.zfps.asia/images/%E6%95%99%E7%A8%8B/git-config.png&quot; alt=&quot;git-config&quot; /&gt;
保存退出后，将 sudoers 文件权限改回原样：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;chmod 400 /etc/sudoers
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;切换到 git 用户，然后在 &lt;code&gt;~&lt;/code&gt; 目录下创建 &lt;code&gt;.ssh&lt;/code&gt; 文件夹：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;su git
cd ~
mkdir .ssh
cd .ssh
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;配置 SSH 密钥&lt;/h4&gt;
&lt;p&gt;生成密钥对：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh-keygen -t rsa
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输入后一路回车。然后在这个目录下就会有两个文件，分别是 &lt;code&gt;id_rsa&lt;/code&gt; 和 &lt;code&gt;id_rsa.pub&lt;/code&gt;，其中 &lt;code&gt;id_rsa.pub&lt;/code&gt; 就是公钥文件，复制一份：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp id_rsa.pub authorized_keys
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样目录下就会有一个 &lt;code&gt;authorized_keys&lt;/code&gt; 文件，修改它的权限：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;chmod 600 ~/.ssh/authorized_keys
chmod 700 ~/.ssh
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;客户端生成密钥&lt;/h4&gt;
&lt;p&gt;在本地电脑的 cmd 窗口中输入 &lt;code&gt;ssh-keygen -t rsa&lt;/code&gt;，也是都按回车，之后会在这个目录下生成密钥。
&lt;img src=&quot;https://www.zfps.asia/images/%E6%95%99%E7%A8%8B/ssh-keygen.png&quot; alt=&quot;ssh-keygen&quot; /&gt;
之后打开 &lt;code&gt;id_rsa.pub&lt;/code&gt; 公钥，复制里面的所有内容，然后到云服务器的 &lt;code&gt;authorized_keys&lt;/code&gt; 文件中粘贴，并保存退出。
之后在本地电脑打开 cmd，输入 &lt;code&gt;ssh -v git@云服务器的公网 IP&lt;/code&gt;。
&lt;img src=&quot;https://www.zfps.asia/images/%E6%95%99%E7%A8%8B/ssh-connect.png&quot; alt=&quot;ssh-connect&quot; /&gt;
出现 &lt;code&gt;Welcome to Alibaba Cloud Elastic Compute Service !&lt;/code&gt;，说明不用输入密码也登录成功了，配置 Git 密钥成功，以后更新博客部署的时候不用输入 Git 密码了！&lt;/p&gt;
&lt;h4&gt;部署 git 仓库&lt;/h4&gt;
&lt;p&gt;创建一个 Git 的仓库，并且新建一个 &lt;code&gt;post-receive&lt;/code&gt; 文件：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd ~
git init --bare blog.git
vi ~/blog.git/hooks/post-receive
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;文件中输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git --work-tree=/home/www/blog --git-dir=/home/git/blog.git checkout -f
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;保存退出并授予该文件可执行权限：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;chmod +x ~/blog.git/hooks/post-receive
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;至此，服务端配置完成。&lt;/p&gt;
&lt;h3&gt;配置 Hexo 并部署发布&lt;/h3&gt;
&lt;h4&gt;安装插件&lt;/h4&gt;
&lt;p&gt;本地电脑和服务器端配置都完成后，在本地电脑的 Hexo 根目录下，输入以下命令安装插件：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install hexo-deployer-git --save
npm install hexo-server
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;修改参数&lt;/h4&gt;
&lt;p&gt;打开 &lt;code&gt;_config.yml&lt;/code&gt; 文件，修改 &lt;code&gt;deploy&lt;/code&gt; 项目如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;deploy:
  type: git
  repo: git@云服务器公网IP:/home/git/blog.git
  branch: master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中，&lt;code&gt;type&lt;/code&gt; 项表示部署类型为 git，仓库 &lt;code&gt;repo&lt;/code&gt; 地址为 &lt;code&gt;git@云服务器公网IP:/home/git/blog.git&lt;/code&gt;，分支 &lt;code&gt;branch&lt;/code&gt; 为 &lt;code&gt;master&lt;/code&gt; 主分支。&lt;/p&gt;
&lt;h4&gt;远程部署&lt;/h4&gt;
&lt;p&gt;在本地电脑的 Hexo 根目录下，输入以下命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hexo clean
hexo g
hexo d
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;或&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hexo c&amp;amp;&amp;amp;hexo g&amp;amp;&amp;amp;hexo d
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这时候到服务器输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nginx -s reload # 重启 nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;再查看 &lt;code&gt;/home/www/blog&lt;/code&gt; 目录可以看到有上传的文件存在了。到这一步你只需要去你的网站看看就可以看到你的博客了。&lt;/p&gt;
&lt;h3&gt;以下为一些问题的解决方法相关链接&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/liupiaos/p/18465792&quot;&gt;Centos7 安装 node.js 以及遇到的各种问题&lt;/a&gt;&lt;/p&gt;
</content:encoded></item><item><title>Markdown 扩展功能</title><link>https://www.zfps.asia/posts/markdown-extended/</link><guid isPermaLink="true">https://www.zfps.asia/posts/markdown-extended/</guid><description>深入了解Mizuki中的Markdown功能</description><pubDate>Wed, 01 May 2024 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;GitHub 仓库卡片&lt;/h2&gt;
&lt;p&gt;您可以添加动态卡片链接至GitHub仓库，页面加载时，仓库信息会从GitHub API获取。&lt;/p&gt;
&lt;p&gt;::github{repo=&quot;matsuzaka-yuki/Mizuki&quot;}&lt;/p&gt;
&lt;p&gt;使用代码 &lt;code&gt;::github{repo=&quot;matsuzaka-yuki/Mizuki&quot;}&lt;/code&gt; 创建GitHub仓库卡片。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;::github{repo=&quot;matsuzaka-yuki/Mizuki&quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;提示框&lt;/h2&gt;
&lt;p&gt;支持以下类型的提示框：&lt;code&gt;note&lt;/code&gt; &lt;code&gt;tip&lt;/code&gt; &lt;code&gt;important&lt;/code&gt; &lt;code&gt;warning&lt;/code&gt; &lt;code&gt;caution&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;:::note
突出显示用户即使在快速浏览时也应考虑的信息。
:::&lt;/p&gt;
&lt;p&gt;:::tip
帮助用户更成功的可选信息。
:::&lt;/p&gt;
&lt;p&gt;:::important
用户成功所需的关键信息。
:::&lt;/p&gt;
&lt;p&gt;:::warning
因潜在风险需要用户立即关注的关键内容。
:::&lt;/p&gt;
&lt;p&gt;:::caution
行动可能带来的负面后果。
:::&lt;/p&gt;
&lt;h3&gt;基础语法&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;:::note
突出显示用户即使在快速浏览时也应考虑的信息。
:::

:::tip
帮助用户更成功的可选信息。
:::
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;自定义标题&lt;/h3&gt;
&lt;p&gt;提示框的标题可以自定义。&lt;/p&gt;
&lt;p&gt;:::note[我的自定义标题]
这是一个带有自定义标题的注释。
:::&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:::note[我的自定义标题]
这是一个带有自定义标题的注释。
:::
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;GitHub 语法&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;[!TIP]
&lt;a href=&quot;https://github.com/orgs/community/discussions/16925&quot;&gt;GitHub语法&lt;/a&gt; 同样得到支持。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; [!NOTE]
&amp;gt; GitHub语法同样得到支持。

&amp;gt; [!TIP]
&amp;gt; GitHub语法同样得到支持。
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;隐藏内容&lt;/h3&gt;
&lt;p&gt;您可以在文本中添加隐藏内容。该内容同样支持 &lt;strong&gt;Markdown&lt;/strong&gt; 语法。&lt;/p&gt;
&lt;p&gt;内容 :spoiler[被隐藏了 &lt;strong&gt;哎呀&lt;/strong&gt;]！&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;内容 :spoiler[被隐藏了 **哎呀**]！&lt;/code&gt;&lt;/pre&gt;
</content:encoded></item><item><title>Mizuki 简单使用指南</title><link>https://www.zfps.asia/posts/guide/</link><guid isPermaLink="true">https://www.zfps.asia/posts/guide/</guid><description>如何使用此博客模板。</description><pubDate>Mon, 01 Apr 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;此博客模板使用 &lt;a href=&quot;https://astro.build/&quot;&gt;Astro&lt;/a&gt; 构建。本指南未提及的内容，您可以在 &lt;a href=&quot;https://docs.astro.build/&quot;&gt;Astro 文档&lt;/a&gt; 中找到答案。&lt;/p&gt;
&lt;h2&gt;文章的前置元数据&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;---
title: My First Blog Post
published: 2023-09-09
description: This is the first post of my new Astro blog.
image: ./cover.jpeg
tags: [Foo, Bar]
category: Front-end
draft: false
---
&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;title&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文章的标题。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;published&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文章的发布日期。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pinned&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;是否将此文章置顶于文章列表顶部。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;description&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文章的简短描述。在首页显示。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;image&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文章的封面图片路径。&amp;lt;br/&amp;gt;1. 以 &lt;code&gt;http://&lt;/code&gt; 或 &lt;code&gt;https://&lt;/code&gt; 开头：使用网络图片&amp;lt;br/&amp;gt;2. 以 &lt;code&gt;/&lt;/code&gt; 开头：指向 &lt;code&gt;public&lt;/code&gt; 目录中的图片&amp;lt;br/&amp;gt;3. 无上述前缀：相对于 markdown 文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;tags&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文章的标签。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;category&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文章的分类。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;licenseName&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文章内容的许可证名称。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;author&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文章的作者。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;sourceLink&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文章内容的源链接或参考来源。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;draft&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;如果文章仍是草稿，则不会显示。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;文章文件的存放位置&lt;/h2&gt;
&lt;p&gt;您的文章文件应放置在 &lt;code&gt;src/content/posts/&lt;/code&gt; 目录下。您也可以创建子目录来更好地组织您的文章和资源文件。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;src/content/posts/
├── post-1.md
└── post-2/
    ├── cover.png
    └── index.md
&lt;/code&gt;&lt;/pre&gt;
</content:encoded></item><item><title>在文章中嵌入视频</title><link>https://www.zfps.asia/posts/video/</link><guid isPermaLink="true">https://www.zfps.asia/posts/video/</guid><description>本文演示如何在博客文章中嵌入视频。</description><pubDate>Mon, 01 Aug 2022 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;只需从 YouTube 或其他平台复制嵌入代码，然后粘贴到 markdown 文件中即可。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
title: 在文章中嵌入视频
published: 2023-10-19
// ...
---

&amp;lt;iframe width=&quot;100%&quot; height=&quot;468&quot; src=&quot;https://www.youtube.com/embed/5gIf0_xpFPI?si=N1WTorLKL0uwLsU_&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;

&amp;lt;iframe width=&quot;100%&quot; height=&quot;468&quot; src=&quot;//player.bilibili.com/player.html?bvid=BV1vt421V7Pv&amp;amp;autoplay=0&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot; &amp;amp;autoplay=0&amp;gt; &amp;lt;/iframe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Bilibili&lt;/h2&gt;
&lt;p&gt;&amp;lt;iframe width=&quot;100%&quot; height=&quot;468&quot; src=&quot;//player.bilibili.com/player.html?bvid=BV1vt421V7Pv&amp;amp;autoplay=0&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot; &amp;amp;autoplay=0&amp;gt; &amp;lt;/iframe&amp;gt;&lt;/p&gt;
&lt;h2&gt;YouTube&lt;/h2&gt;
&lt;p&gt;&amp;lt;iframe width=&quot;100%&quot; height=&quot;468&quot; src=&quot;https://www.youtube.com/embed/5gIf0_xpFPI?si=N1WTorLKL0uwLsU_&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/p&gt;
</content:encoded></item></channel></rss>