<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Memories_white的博客</title>
  <subtitle>基于Astro框架</subtitle>
  <link href="https://www.zfps.asia/" rel="alternate" type="text/html"/>
  <link href="https://www.zfps.asia/atom.xml" rel="self" type="application/atom+xml"/>
  <id>https://www.zfps.asia/</id>
  <updated>2025-10-17T15:36:07.206Z</updated>
  <language>zh_CN</language>
  <entry>
    <title>部署搭建LAMP-LNMP-WordPress</title>
    <link href="https://www.zfps.asia/posts/lamp-lnmp-wordpress/" rel="alternate" type="text/html"/>
    <id>https://www.zfps.asia/posts/lamp-lnmp-wordpress/</id>
    <published>2025-06-10T17:18:24.000Z</published>
    <updated>2025-06-10T17:18:24.000Z</updated>
    <summary>使用CentOS7部署搭建LAMP-LNMP-WordPress</summary>
    <content type="html"><![CDATA[<h3>前言</h3>
<p>&lt;h3&gt;如果你发现安装不了第一步的包时你需要去看上一篇文档的换源操作&lt;/h3&gt;</p>
<hr />
<h3>安装必要软件包</h3>
<h4>系统工具包</h4>
<p>&lt;h4&gt;包含 wget vim 两种包&lt;/h4&gt;</p>
<pre><code>#安装wget vim
yum install wget vim epel-release -y
</code></pre>
<h4>安装 Apache Web 服务器</h4>
<pre><code>#安装 Apache
yum install httpd -y

c
systemctl start httpd
systemctl enable httpd

# 配置防火墙
firewall-cmd --permanent --add-service=http
firewall-cmd --permanent --add-service=https
firewall-cmd --reload
</code></pre>
<h4>安装 MariaDB 数据库</h4>
<pre><code>#安装 MariaDB
yum install mariadb-server -y

#设置开机自启
systemctl start mariadb
systemctl enable mariadb

# 安全初始化（设置root密码，移除匿名用户等）
mysql_secure_installation
</code></pre>
<h5>安全初始化说明</h5>
<p>部分直接使用翻译是否启用自行斟酌
这里可能需要登录,默认密码为空直接回车即可</p>
<pre><code>#这里是问你是否重置或创建新密码
Setting the root password ensures that nobody can log into the MariaDB
root user without the proper authorisation.

#这里直接选择是y
Set root password? [Y/n] y
New password:
Re-enter new password:
Password updated successfully!
Reloading privilege tables..
#创建成功提示
 ... Success!


By default, a MariaDB installation has an anonymous user, allowing anyone
to log into MariaDB without having to have a user account created for
them.  This is intended only for testing, and to make the installation
go a bit smoother.  You should remove them before moving into a
production environment.
#默认情况下，MariaDB 安装会有一个匿名用户，这使得任何人无需创建用户账户即可登录 MariaDB。这仅用于测试目的，以使安装过程更顺畅一些。在进入生产环境之前，你应该删除这些匿名用户。

Remove anonymous users? [Y/n] n
 ... skipping.

Normally, root should only be allowed to connect from 'localhost'.  This
ensures that someone cannot guess at the root password from the network.
#通常情况下，应该只允许 root 从 “localhost” 进行连接。这能确保没有人能从网络上猜出 root 密码。

Disallow root login remotely? [Y/n] n
 ... skipping.

By default, MariaDB comes with a database named 'test' that anyone can
access.  This is also intended only for testing, and should be removed
before moving into a production environment.
#默认情况下，MariaDB 带有一个名为 “test” 的数据库，任何人都可以访问。此数据库仅用于测试目的，在进入生产环境之前应将其删除。

Remove test database and access to it? [Y/n] n
 ... skipping.

Reloading the privilege tables will ensure that all changes made so far
will take effect immediately.
#重新加载权限表将确保到目前为止所做的所有更改立即生效。

Reload privilege tables now? [Y/n] n
 ... skipping.

Cleaning up...


#全部准备好后出现这个提示则表示成功
All done!  If you've completed all of the above steps, your MariaDB
installation should now be secure.

Thanks for using MariaDB!
</code></pre>
<h4>安装 PHP 7.4</h4>
<pre><code># 添加Remi源
wget http://rpms.remirepo.net/enterprise/remi-release-7.rpm
rpm -Uvh remi-release-7.rpm
yum update -y

# 安装PHP 7.4及扩展
yum --enablerepo=remi-php74 install php php-cli php-fpm php-mysqlnd php-gd php-json php-mbstring php-xml php-zip -y

# 验证PHP版本
php -v  # 应显示PHP 7.4.x
</code></pre>
<h4>下载并安装 WordPress</h4>
<pre><code>cd /tmp
wget https://cn.wordpress.org/latest-zh_CN.tar.gz
tar -xzf latest-zh_CN.tar.gz

# 复制文件到Web根目录
cp -r wordpress/* /var/www/html/
chown -R apache:apache /var/www/html/
</code></pre>
<h3>配置 PHP 与 Apache 集成</h3>
<pre><code># 编辑Apache配置文件
vim /etc/httpd/conf/httpd.conf

# 在文件中添加以下内容（在LoadModule区域后）
# LoadModule 后的内容视版本决定，你是什么版本就选择那个版本
LoadModule php_module modules/libphp.so #8.x版本
LoadModule php7_module modules/libphp7.so #7.x版本
AddHandler php-script .php
DirectoryIndex index.php index.html

# 重启Apache
systemctl restart httpd
</code></pre>
<h3>验证 LAMP 环境</h3>
<h4>创建 phpinfo.php 测试文件</h4>
<pre><code>#创建文件并写入
echo "&lt;?php phpinfo(); ?&gt;" &gt; /var/www/html/phpinfo.php
#赋予权限
chown apache:apache /var/www/html/phpinfo.php

#成功后访问地址
http://你的ip地址/phpinfo.php
</code></pre>
<p>示例图
<img src="https://www.zfps.asia/images/%E6%95%99%E7%A8%8B/LAMP-WordPress/PHP.png" alt="LAMP" /></p>
<h3>WordPress 部署</h3>
<h4>创建 WordPress 数据库</h4>
<pre><code># 登录MySQL（使用之前设置的root密码）
mysql -u root -p

# 创建WordPress数据库和用户（wordpress为数据库名）
CREATE DATABASE wordpress DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
CREATE USER '用户名'@'localhost' IDENTIFIED BY '数据库密码';
GRANT ALL PRIVILEGES ON wordpress.* TO '用户名'@'localhost';
FLUSH PRIVILEGES;
EXIT;
</code></pre>
<h4>配置 WordPress</h4>
<pre><code># 创建配置文件
cd /var/www/html
cp wp-config-sample.php wp-config.php
vim wp-config.php

# 修改以下配置（找到对应行并替换）（wordpress为数据库名，需要填上你上面那个步骤创建的数据库）
define('DB_NAME', 'wordpress');
define('DB_USER', '用户名');
define('DB_PASSWORD', '你的密码');
define('DB_HOST', 'localhost');

# 可选：添加安全密钥（从https://api.wordpress.org/secret-key/1.1/salt/生成）
# 直接复制生成的内容替换下面的部分
define('AUTH_KEY',         'put your unique phrase here');
define('SECURE_AUTH_KEY',  'put your unique phrase here');
define('LOGGED_IN_KEY',    'put your unique phrase here');
define('NONCE_KEY',        'put your unique phrase here');
define('AUTH_SALT',        'put your unique phrase here');
define('SECURE_AUTH_SALT', 'put your unique phrase here');
define('LOGGED_IN_SALT',   'put your unique phrase here');
define('NONCE_SALT',       'put your unique phrase here');
</code></pre>
<h4>进入 WordPress 安装向导</h4>
<pre><code>http://你的ip地址/wp-admin
</code></pre>
<p>&lt;h3&gt;后台管理界面&lt;/h3&gt;</p>
<p><img src="https://www.zfps.asia/images/%E6%95%99%E7%A8%8B/LAMP-WordPress/WordPress.png" alt="WordPress" /></p>
<h3>LNMP 环境部署</h3>
<h4>安装 Nginx</h4>
<pre><code># 添加Nginx官方源
cat &gt; /etc/yum.repos.d/nginx.repo &lt;&lt; EOF
[nginx]
name=nginx repo
baseurl=http://nginx.org/packages/centos/7/\$basearch/
gpgcheck=0
enabled=1
EOF

# 安装Nginx
yum install nginx -y

# 启动并设置开机自启
systemctl start nginx
systemctl enable nginx

# 配置防火墙
firewall-cmd --permanent --add-service=http
firewall-cmd --permanent --add-service=https
firewall-cmd --reload
</code></pre>
<h4>配置 Nginx 与 PHP-FPM</h4>
<pre><code>#创建 Nginx 虚拟主机配置
vim /etc/nginx/conf.d/wordpress.conf


#内容
server {
    listen 80; #这里的端口视情况调整，如果有Apache则调整端口号
    server_name 192.168.0.0;  # 修改为您的域名或IP
    root /var/www/html;
    index index.php index.html;

    location / {
        try_files $uri $uri/ /index.php?$args;
    }

    # PHP-FPM处理PHP文件
    location ~ \.php$ {
        fastcgi_pass 127.0.0.1:9000;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include fastcgi_params;
    }

    # 禁止访问敏感文件
    location ~ /\.ht {
        deny all;
    }
}
</code></pre>
<pre><code>#验证 Nginx 配置
nginx -t
#重启 nginx php-fpm
systemctl restart nginx php-fpm
</code></pre>
<h4>验证 PHP 与 Nginx 集成</h4>
<pre><code>#创建文件验证是否成功
echo "&lt;?php phpinfo(); ?&gt;" &gt; /var/www/html/info.php

#浏览器输入
http://你的ip地址/info.php
</code></pre>
<h3>WordPress 在 LNMP 环境下的配置</h3>
<h4>确保数据库已创建（如果之前已创建可跳过）</h4>
<pre><code>mysql -u root -p
CREATE DATABASE wordpress DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
CREATE USER '用户名'@'localhost' IDENTIFIED BY '密码';
GRANT ALL PRIVILEGES ON wordpress.* TO '用户名'@'localhost';
FLUSH PRIVILEGES;
EXIT;
</code></pre>
<pre><code>#配置 WordPress 文件权限
chown -R nginx:nginx /var/www/html
chmod -R 755 /var/www/html

#浏览器访问
http://你的ip地址/wp-admin
</code></pre>
<p>出现后台界面即为成功</p>
]]></content>
    <author>
      <name>Memories_white</name>
    </author>
    <category term="教程"></category>
  </entry>
  <entry>
    <title>NFS Server实现web01、web02站点的数据共享</title>
    <link href="https://www.zfps.asia/posts/centos7_experiment/" rel="alternate" type="text/html"/>
    <id>https://www.zfps.asia/posts/centos7_experiment/</id>
    <published>2025-06-09T14:25:22.000Z</published>
    <updated>2025-06-09T14:25:22.000Z</updated>
    <summary>使用CentOS7实现通过NFS Server实现web01、web02站点的数据共享</summary>
    <content type="html"><![CDATA[<h3>说明</h3>
<p>全部虚拟机只有两个步骤相同操作,四台虚拟机进行换源操作并关闭防火墙.实验准备中表格中的节点名称可以按照自己的需求更改,IP 地址视情况更改,Node2-3 为部署 web 站点,这里只展示一台的步骤,两台的步骤相同.</p>
<h4>实验图</h4>
<p><img src="https://www.zfps.asia/images/%E6%95%99%E7%A8%8B/CentOS7_experiment/experiment.png" alt="nginx实验图" /></p>
<hr />
<h3>实验准备</h3>
<h4>实验需准备四台虚拟机,以下视情况进行更改.</h4>
<table>
<thead>
<tr>
<th>节点名称</th>
<th>IP 地址</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>node01</td>
<td>192.168.100.134</td>
<td>负载均衡器（部署 Nginx 反向代理）</td>
</tr>
<tr>
<td>node02</td>
<td>192.168.100.135</td>
<td>Web 站点 1（Nginx + NFS 挂载）</td>
</tr>
<tr>
<td>node03</td>
<td>192.168.100.136</td>
<td>Web 站点 2（Nginx + NFS 挂载）</td>
</tr>
<tr>
<td>node04</td>
<td>192.168.100.137</td>
<td>NFS 服务器（提供共享存储）</td>
</tr>
</tbody>
</table>
<h3>Node1-4 换源操作,并关闭防火墙</h3>
<p>这里的操作是需要对四台虚拟机进行的操作</p>
<h4>备份默认源</h4>
<pre><code>sudo cp /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak
</code></pre>
<h4>进行换源操作,这里使用阿里云源,需要使用其他源也可以换成别的</h4>
<p><code>阿里云源</code></p>
<pre><code>sudo wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo
</code></pre>
<p><code>清华大学源</code></p>
<pre><code>sudo wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.tuna.tsinghua.edu.cn/repo/Centos-7.repo
</code></pre>
<p><code>网易源</code></p>
<pre><code>sudo wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.163.com/.help/CentOS7-Base-163.repo
</code></pre>
<p><code>中科大源</code></p>
<pre><code>sudo wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.ustc.edu.cn/centos/7/os/x86_64/
</code></pre>
<h4>清理 yum 源</h4>
<pre><code>sudo yum clean all
sudo yum makecache
</code></pre>
<h4>验证是否有效</h4>
<pre><code>sudo yum repolist
</code></pre>
<h4>关闭防火墙</h4>
<pre><code>systemctl stop firewalld.service
</code></pre>
<h3>Node4 操作</h3>
<h4>安装 NFS 服务</h4>
<pre><code>yum install -y nfs-utils rpcbind
</code></pre>
<h4>创建共享目录并设置权限</h4>
<p>创建共享目录，用于存放 Web 站点需共享的数据</p>
<pre><code>mkdir -p /data/nfs_share
chown -R nfsnobody:nfsnobody /data/nfs_share
chmod -R 755 /data/nfs_share
</code></pre>
<h4>配置 NFS 共享规则</h4>
<p>编辑 /etc/exports 文件，添加共享配置，允许指定网段访问共享目录</p>
<pre><code>echo "/data/nfs_share 192.168.100.0/24(rw,sync,no_root_squash)" &gt;&gt; /etc/exports
</code></pre>
<p>其中，192.168.100.0/24 表示允许该网段内节点访问，rw 为读写权限，sync 保障数据同步写入，no_root_squash 允许客户端以 root 身份访问（生产环境可按需调整为更严格权限 ）</p>
<h4>启动服务并设置开机自启</h4>
<pre><code>systemctl start rpcbind nfs
systemctl enable rpcbind nfs
</code></pre>
<h4>验证 NFS 服务是否生效</h4>
<pre><code>showmount -e localhost
# 正常输出示例：
# Export list for localhost:
# /data/nfs_share 192.168.100.0/24
</code></pre>
<h3>Node2-3 部署 Web 服务（数据同步依赖 NFS 挂载 ）</h3>
<h4>安装 Nginx 所需要的环境</h4>
<p>由于 CentOS7 没办法使用命令方式直接安装,只能使用编译安装,所以这里使用的是编译安装,其他相同或版本默认安装路径不同,如果使用包管理器安装 Nginx 路径为:<code>/usr/share/nginx/</code>,使用编译安装的路径为:<code>/usr/local/nginx</code></p>
<pre><code>
#安装 nginx 需要先将官网下载的源码进行编译，编译依赖 gcc 环境
yum install gcc-c++
#pcre是一个perl库，包括perl兼容的正则表达式库，nginx的http模块使用pcre来解析正则表达式，所以需要安装pcre库
yum install -y pcre pcre-devel
#zlib库提供了很多种压缩和解压缩方式nginx使用zlib对http包的内容进行gzip，所以需要安装
yum install -y zlib zlib-devel
#nginx 不仅支持 http 协议，还支持 https（即在ssl协议上传输http），所以需要在 Centos 安装 OpenSSL 库
yum install -y openssl openssl-devel
</code></pre>
<h4>安装 Nginx</h4>
<p>这里使用的是编译安装,需要先在官网下载包到本地解压进行编译安装</p>
<pre><code>#进入usr下的local目录
cd usr/local
#在local目录下创建 nginx 文件夹
mkdir nginx
#进入nginx目录
cd nginx
</code></pre>
<p>通过 wget 下载 nginx 安装包</p>
<pre><code>wget https://nginx.org/download/nginx-1.22.1.tar.gz
</code></pre>
<p>解压并加入目录</p>
<pre><code>tar -zxvf nginx-1.22.1.tar.gz
cd nginx-1.22.1
</code></pre>
<p>配置</p>
<pre><code>./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module
</code></pre>
<p>编译安装</p>
<pre><code>#编译
make
#安装
make install
</code></pre>
<p>启动 nginx 服务,附关闭命令</p>
<pre><code>###启动服务
#需要先进入sbin目录下
cd /usr/local/nginx/sbin
#启动nginx服务
./nginx

###关闭服务
#需要先进入sbin目录下
cd /usr/local/nginx/sbin
#关闭nginx服务
./nginx -s stop
</code></pre>
<p>配置 nginx 配置环境变量</p>
<pre><code>vim /etc/profile

####在最后一行添加
export PATH=$PATH:/usr/local/nginx/sbin
</code></pre>
<p>定位到服务目录下并使配置生效</p>
<pre><code>cd /usr/local/nginx/sbin
source /etc/profile
</code></pre>
<p>浏览器输入 Node4 服务器 ip 出现如下画面为成功
<img src="https://www.zfps.asia/images/%E6%95%99%E7%A8%8B/CentOS7_experiment/node4success.png" alt="node4站点图" /></p>
<h4>Node2-3 部署 Web 站点</h4>
<h5>挂载 NFS 共享目录</h5>
<pre><code>#安装 NFS 服务
yum install -y nfs-utils

# 手动挂载（测试用）
mount -t nfs 192.168.100.137:/data/nfs_share /usr/share/nginx/html

# 设置开机自动挂载，编辑 /etc/fstab 文件
echo "192.168.100.137:/data/nfs_share /usr/share/nginx/html nfs defaults 0 0" &gt;&gt; /etc/fstab
mount -a  # 使挂载配置立即生效，无报错则挂载成功
</code></pre>
<h5>启动 Nginx 并设置开机自启</h5>
<pre><code>systemctl start nginx
systemctl enable nginx
</code></pre>
<h5>验证数据同步</h5>
<p>在 NFS 服务端（node04 节点 ）的共享目录创建测试文件</p>
<pre><code>echo "Hello from NFS Share!" &gt; /data/nfs_share/index.html
</code></pre>
<p>在 node02、node03 节点，通过 curl 命令访问本地 Nginx 服务，验证数据是否同步</p>
<pre><code>curl 127.0.0.1
# 应输出 "Hello from NFS Share!"，说明数据同步成功
</code></pre>
<h3>Node1 部署负载均衡（采用 Nginx 反向代理 ）</h3>
<h4>安装 Nginx,这里安装 Nginx 同上面的 Node2-3 操作相同故不演示</h4>
<h4>配置负载均衡规则</h4>
<p>编辑 /usr/local/nginx/conf.d/loadbalance.conf 文件（若无则新建 ），添加负载均衡配置</p>
<pre><code>upstream web_servers {
    server 192.168.100.135;  # Web01 节点（node02）
    server 192.168.100.136;  # Web02 节点（node03）
    # 可按需添加负载均衡策略，如 weight（权重）、ip_hash（会话保持）等，默认轮询策略
}

server {
    listen 80;
    server_name localhost;

    location / {
        proxy_pass http://web_servers;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }
}
</code></pre>
<p>重启 Nginx</p>
<pre><code>/usr/local/nginx/sbin/nginx -s reload
</code></pre>
<h4>启动 Nginx 并验证</h4>
<pre><code>systemctl start nginx
systemctl enable nginx

nginx -t  # 检查配置语法，输出 "syntax is ok" 则配置正常
</code></pre>
<h4>测试负载均衡功能，在 node01 节点或客户端执行 curl 命令</h4>
<pre><code>curl 127.0.0.1
# 应返回 Web 节点的测试内容，多次执行可观察请求转发情况
</code></pre>
<h3>系统可用性测试</h3>
<h4>客户端访问测试</h4>
<p>在同网段的客户端（如本地电脑浏览器、其他虚拟机 ），访问负载均衡器（node01 ）的 IP 地址</p>
<pre><code>http://192.168.0.100
</code></pre>
<p>预期显示 Hello from NFS Share!（与 Web 节点内容一致 ）。多次刷新页面，可验证负载均衡是否按策略（默认轮询 ）转发请求，也可查看 Nginx 访问日志确认：</p>
<pre><code>cat /var/log/nginx/access.log
</code></pre>
]]></content>
    <author>
      <name>Memories_white</name>
    </author>
    <category term="教程"></category>
  </entry>
  <entry>
    <title>域名绑定SSL教程</title>
    <link href="https://www.zfps.asia/posts/ssl/" rel="alternate" type="text/html"/>
    <id>https://www.zfps.asia/posts/ssl/</id>
    <published>2025-04-17T10:15:40.000Z</published>
    <updated>2025-04-17T10:15:40.000Z</updated>
    <summary>nginx域名配置SSL教程</summary>
    <content type="html"><![CDATA[<h3>域名绑定 SSL</h3>
<p>这里仅演示 Nginx 的配置方法。首先，你需要到阿里云或其他域名服务商购买 SSL 证书。下面会展示阿里云的免费申请步骤，较为简单的申请途径还有 <a href="https://httpsok.com/">httpsok</a>。</p>
<h4>域名 SSL 申请</h4>
<h5>阿里云</h5>
<p>首先访问这个链接 <a href="https://yundun.console.aliyun.com/?spm=5176.100251.111252.41.5fb44f15MZPMGP&amp;p=cas#/certExtend/free/cn-hangzhou?currentPage=1&amp;pageSize=10&amp;keyword=&amp;statusCode=">阿里云 SSL 证书</a>。购买成功后，如下图所示，点击“更多”，在里面下载 Nginx 证书。
<img src="https://www.zfps.asia/images/%E6%95%99%E7%A8%8B/SSL/%E9%98%BF%E9%87%8C%E4%BA%91SSL.png" alt="阿里云 SSL 证书" /></p>
<h5>httpsok</h5>
<p>进入 <a href="https://httpsok.com/">httpsok</a> 官网，注册成功后，直接进入申请免费 SSL 的流程。
<img src="https://www.zfps.asia/images/%E6%95%99%E7%A8%8B/SSL/httpsok.png" alt="httpsok" /></p>
<p>输入域名后会进行 DNS 解析，这里的主机记录和记录值需要到 DNS 服务商处设置，一般是 CNAME 记录，就像图中的记录类型一样。之后，从 httpsok 复制主机记录和记录值并粘贴到相应位置，然后点击“提交”即可。
<img src="https://www.zfps.asia/images/%E6%95%99%E7%A8%8B/SSL/httpsokzs.png" alt="httpsok zs" />
<img src="https://www.zfps.asia/images/%E6%95%99%E7%A8%8B/SSL/httpsokDNS.png" alt="httpsok DNS" /></p>
<h4>上传证书</h4>
<p>首先，在服务器上找到 Nginx 的安装路径，这里我的路径是 <code>/etc/nginx/</code>，在 Nginx 目录下创建 <code>cert</code> 文件夹。</p>
<pre><code>mkdir /etc/nginx/cert
</code></pre>
<p>完成以上步骤后，找到你下载好的证书（.zip 格式），压缩包里有两个文件，分别是以 <code>.pem</code> 结尾的证书和以 <code>.key</code> 结尾的密钥。将这两个文件解压出来，上传到服务器。这里以 <code>scp</code> 命令为例，在证书文件目录下打开命令提示符（CMD），输入以下命令：</p>
<pre><code>scp * root@你的服务器公网ip:/etc/nginx/cert
</code></pre>
<p><img src="https://www.zfps.asia/images/%E6%95%99%E7%A8%8B/SSL/scp.png" alt="scp" /></p>
<h4>配置 Nginx</h4>
<p>在修改 <code>nginx.conf</code> 配置文件之前，先备份一份配置文件，输入 <code>cp</code> 命令，之后打开配置文件。</p>
<pre><code>cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.bak
vim nginx.conf # 打开配置文件
</code></pre>
<p>在 <code>nginx.conf</code> 中添加以下配置信息，服务器端口需要打开 443。</p>
<pre><code># HTTPS server
server {
    listen       443 ssl;  # 监听 443 端口
    server_name  这里填域名;

    ssl_certificate      cert/这里填你的证书文件名.pem;
    ssl_certificate_key  cert/这里填你的密钥文件名.key;

    ssl_session_timeout  5m;

    ssl_ciphers  HIGH:!aNULL:!MD5;

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

    ssl_prefer_server_ciphers  on;

    root /home/www/blog;   # 这里填你的网站目录
    index index.html index.php;
    location / {

    }
}
</code></pre>
<p>配置完成之后，保存文件，使用 Nginx 的命令测试一下配置文件是否正确：</p>
<pre><code>nginx -t
</code></pre>
<p>如果输出结果没有错误，如下所示：</p>
<pre><code>nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok
nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful
</code></pre>
<p>然后重新加载 Nginx 配置文件：</p>
<pre><code>nginx -s reload
</code></pre>
<p>至此，配置就完成了。接下来，你只需访问你的网站，查看左上角的小锁，就能看到 SSL 证书的绿色锁标志了。
<img src="https://www.zfps.asia/images/%E6%95%99%E7%A8%8B/SSL/SSL%E8%AF%81%E4%B9%A6.png" alt="SSL 证书" /></p>
]]></content>
    <author>
      <name>Memories_white</name>
    </author>
    <category term="教程"></category>
  </entry>
  <entry>
    <title>阿里云搭建hexo</title>
    <link href="https://www.zfps.asia/posts/hexo-ailiyun/" rel="alternate" type="text/html"/>
    <id>https://www.zfps.asia/posts/hexo-ailiyun/</id>
    <published>2025-04-16T17:50:41.000Z</published>
    <updated>2025-04-16T17:50:41.000Z</updated>
    <summary>使用阿里云搭建hexo博客教程</summary>
    <content type="html"><![CDATA[<h3>本教程基于 阿里云 Centos7</h3>
<h3>前置条件</h3>
<ul>
<li>
<ol>
<li>阿里云账号</li>
</ol>
</li>
<li>
<ol>
<li>域名</li>
</ol>
</li>
<li>
<ol>
<li>云服务器</li>
</ol>
</li>
</ul>
<p>本教程会大概告诉你遇到的一些问题、解决方法、注意事项以及相关链接，希望能帮到你。有关服务器购买以及域名的内容，这里只会初略带过，这里跳过服务器购买，直接从域名开始。</p>
<h3>域名购买以及备案后</h3>
<p>首先去解析 DNS 服务，这里以阿里云为例。
<img src="https://www.zfps.asia/images/%E6%95%99%E7%A8%8B/DNS.png" alt="域名解析" />
点击快速添加解析，然后勾选必要选项即可。网站的 IP 地址为你服务器的公网 IP。完成以上操作后，你会看到像上面截图那样多出来两个选项。至此，你的域名就准备完成了。</p>
<h3>本地主机配置</h3>
<h4>安装 Node.js</h4>
<p>浏览器进入 <a href="https://nodejs.org/zh-cn">NodeJS 官网</a>，点击下载 Node.js(LTS 版本)安装包。验证 Node.js 是否安装成功：按下 <code>win+r</code> 进入 cmd 窗口，输入 <code>node -v</code>，出现版本号即为安装成功。如果不成功，就需要去环境变量中添加 Node.js 的安装路径，或者重新安装 Node.js。
<img src="https://www.zfps.asia/images/%E6%95%99%E7%A8%8B/Node.png" alt="Node" /></p>
<h4>安装 Hexo</h4>
<p>在 cmd 窗口输入以下命令安装 Hexo：</p>
<pre><code>npm install hexo-cli -g
</code></pre>
<p>完成后输入 <code>hexo -v</code> 验证是否安装成功。出现下图就说明安装成功。
<img src="https://www.zfps.asia/images/%E6%95%99%E7%A8%8B/hexo.png" alt="hexo" /></p>
<h4>初始化根目录</h4>
<p>你需要自己找个地方创建文件夹，尽可能使用英文路径。例如像这样：
<img src="https://www.zfps.asia/images/%E6%95%99%E7%A8%8B/hexo-folder.png" alt="hexo-folder" />
你不一定要跟示例一样，这个路径你自己找个熟悉的地方存放即可。文件夹名称随意，但不要用中文。在文件夹根目录下打开 cmd 窗口，然后输入 <code>hexo init</code>，然后回车。这里可能会出现警告信息，不用管它，只要目录下有相关文件就行。
<img src="https://www.zfps.asia/images/%E6%95%99%E7%A8%8B/hexo-init.png" alt="hexo-init" />
<img src="https://www.zfps.asia/images/%E6%95%99%E7%A8%8B/hexo-tage.png" alt="hexo-tage" /></p>
<h4>完成以上步骤后就能打开服务器了</h4>
<p>输入以下命令（生成静态文件，并开启本地服务器）：</p>
<pre><code>hexo g&amp;&amp;hexo s
</code></pre>
<p><img src="https://www.zfps.asia/images/%E6%95%99%E7%A8%8B/hexo-g.png" alt="hexo-g" />
在浏览器中打开 <code>http://localhost:4000</code>，即可看到初始的博客页面。出现以下画面说明本地部署已经成功。
<img src="https://www.zfps.asia/images/%E6%95%99%E7%A8%8B/hexo-s.png" alt="hexo-s" /></p>
<p>至此，本地主机配置完成。</p>
<h3>服务器配置</h3>
<p>如果出现安装问题，可以去最底下的相关链接查看解决方法。</p>
<h4>安装 nginx</h4>
<p>首先切换到 root 用户：</p>
<pre><code>sudo su root
</code></pre>
<p>安装 nginx（nginx 不在默认的 yum 源中，需要改用别的源）：</p>
<pre><code>sudo yum install epel-release
sudo yum install nginx
</code></pre>
<p>完成后启动 nginx：</p>
<pre><code>systemctl start nginx # 启动服务
systemctl enable nginx # 设为开机自启
</code></pre>
<h4>建立博客根目录</h4>
<p>将博客的页面文件放在 <code>/home/www/blog/</code> 路径下，需要先创建这些文件，然后再给文件夹赋权限：</p>
<pre><code>cd /home
mkdir www
cd www
mkdir blog
chmod 777 /home/www/blog
chmod 777 /home/www
</code></pre>
<p>查看创建的路径：
<img src="https://www.zfps.asia/images/%E6%95%99%E7%A8%8B/hexo-path.png" alt="hexo-path" /></p>
<h4>配置 nginx</h4>
<p>建立了博客的根目录后，需要将 nginx 服务器指向这个根目录地址，才能访问到博客页面，所以需要修改 nginx 的配置文件。</p>
<pre><code>cd /etc/nginx
ls
</code></pre>
<p>如果有这个配置文件说明 nginx 已经安装成功了，如果没有，那可能你安装失败了。
<img src="https://www.zfps.asia/img/%E6%95%99%E7%A8%8B/nginx-config.png" alt="nginx-config" />
创建 <code>vhosts</code> 文件夹：</p>
<pre><code>cd /etc/nginx
mkdir vhost
cd vhost
</code></pre>
<p>输入 <code>vim blog.conf</code> 新建 <code>blog.conf</code> 文件并编辑内容：</p>
<pre><code>server {
    listen 80;
    root /home/www/blog;
    server_name 这里改成你的域名;
    location / {
    }
}
</code></pre>
<p>保存退出，然后输入 <code>nginx -t</code> 检查配置文件是否有误，如果没有错误，输入 <code>nginx -s reload</code> 重启 nginx。
<img src="https://www.zfps.asia/images/%E6%95%99%E7%A8%8B/nginx-blog.png" alt="nginx-blog" />
打开 <code>/etc/nginx/</code> 目录下的 <code>nginx.conf</code> 文件，添加下面一行代码，将刚才新建的配置文件引入进来。<code>*.conf</code> 的意思是将 <code>vhost</code> 文件夹下的所有 <code>.conf</code> 后缀的文件都引入了进来。</p>
<pre><code>include /etc/nginx/vhost/*.conf;
</code></pre>
<p><img src="https://www.zfps.asia/images/%E6%95%99%E7%A8%8B/nginx-conf.png" alt="nginx--conf" /></p>
<h4>安装 nodeJS</h4>
<p>输入命令：</p>
<pre><code>curl -sL https://rpm.nodesource.com/setup_10.x | bash -
yum install -y nodejs
</code></pre>
<p>安装完成后执行 <code>node -v</code> 和 <code>npm -v</code>，如果打印版本号则安装成功。
<img src="https://www.zfps.asia/images/%E6%95%99%E7%A8%8B/node-version.png" alt="node-version" /></p>
<h4>配置服务端 Git</h4>
<p>这一部分主要目的是本地电脑可以通过 ssh 方式连接到云服务器，然后就可以通过命令行方式将博客传到云服务器上。
首先安装 git：</p>
<pre><code>yum install git
</code></pre>
<p>配置 git 用户：</p>
<pre><code>adduser git # 添加 git 用户
passwd git # 设置密码
chmod 740 /etc/sudoers # 修改 sudoers 文件权限
</code></pre>
<p>在 <code>vi /etc/sudoers</code> 打开的文件中，找到合适位置添加如下命令：</p>
<pre><code>git ALL=(ALL) ALL
</code></pre>
<p><img src="https://www.zfps.asia/images/%E6%95%99%E7%A8%8B/git-config.png" alt="git-config" />
保存退出后，将 sudoers 文件权限改回原样：</p>
<pre><code>chmod 400 /etc/sudoers
</code></pre>
<p>切换到 git 用户，然后在 <code>~</code> 目录下创建 <code>.ssh</code> 文件夹：</p>
<pre><code>su git
cd ~
mkdir .ssh
cd .ssh
</code></pre>
<h4>配置 SSH 密钥</h4>
<p>生成密钥对：</p>
<pre><code>ssh-keygen -t rsa
</code></pre>
<p>输入后一路回车。然后在这个目录下就会有两个文件，分别是 <code>id_rsa</code> 和 <code>id_rsa.pub</code>，其中 <code>id_rsa.pub</code> 就是公钥文件，复制一份：</p>
<pre><code>cp id_rsa.pub authorized_keys
</code></pre>
<p>这样目录下就会有一个 <code>authorized_keys</code> 文件，修改它的权限：</p>
<pre><code>chmod 600 ~/.ssh/authorized_keys
chmod 700 ~/.ssh
</code></pre>
<h4>客户端生成密钥</h4>
<p>在本地电脑的 cmd 窗口中输入 <code>ssh-keygen -t rsa</code>，也是都按回车，之后会在这个目录下生成密钥。
<img src="https://www.zfps.asia/images/%E6%95%99%E7%A8%8B/ssh-keygen.png" alt="ssh-keygen" />
之后打开 <code>id_rsa.pub</code> 公钥，复制里面的所有内容，然后到云服务器的 <code>authorized_keys</code> 文件中粘贴，并保存退出。
之后在本地电脑打开 cmd，输入 <code>ssh -v git@云服务器的公网 IP</code>。
<img src="https://www.zfps.asia/images/%E6%95%99%E7%A8%8B/ssh-connect.png" alt="ssh-connect" />
出现 <code>Welcome to Alibaba Cloud Elastic Compute Service !</code>，说明不用输入密码也登录成功了，配置 Git 密钥成功，以后更新博客部署的时候不用输入 Git 密码了！</p>
<h4>部署 git 仓库</h4>
<p>创建一个 Git 的仓库，并且新建一个 <code>post-receive</code> 文件：</p>
<pre><code>cd ~
git init --bare blog.git
vi ~/blog.git/hooks/post-receive
</code></pre>
<p>文件中输入：</p>
<pre><code>git --work-tree=/home/www/blog --git-dir=/home/git/blog.git checkout -f
</code></pre>
<p>保存退出并授予该文件可执行权限：</p>
<pre><code>chmod +x ~/blog.git/hooks/post-receive
</code></pre>
<p>至此，服务端配置完成。</p>
<h3>配置 Hexo 并部署发布</h3>
<h4>安装插件</h4>
<p>本地电脑和服务器端配置都完成后，在本地电脑的 Hexo 根目录下，输入以下命令安装插件：</p>
<pre><code>npm install hexo-deployer-git --save
npm install hexo-server
</code></pre>
<h4>修改参数</h4>
<p>打开 <code>_config.yml</code> 文件，修改 <code>deploy</code> 项目如下：</p>
<pre><code>deploy:
  type: git
  repo: git@云服务器公网IP:/home/git/blog.git
  branch: master
</code></pre>
<p>其中，<code>type</code> 项表示部署类型为 git，仓库 <code>repo</code> 地址为 <code>git@云服务器公网IP:/home/git/blog.git</code>，分支 <code>branch</code> 为 <code>master</code> 主分支。</p>
<h4>远程部署</h4>
<p>在本地电脑的 Hexo 根目录下，输入以下命令：</p>
<pre><code>hexo clean
hexo g
hexo d
</code></pre>
<p>或</p>
<pre><code>hexo c&amp;&amp;hexo g&amp;&amp;hexo d
</code></pre>
<p>这时候到服务器输入：</p>
<pre><code>nginx -s reload # 重启 nginx
</code></pre>
<p>再查看 <code>/home/www/blog</code> 目录可以看到有上传的文件存在了。到这一步你只需要去你的网站看看就可以看到你的博客了。</p>
<h3>以下为一些问题的解决方法相关链接</h3>
<p><a href="https://www.cnblogs.com/liupiaos/p/18465792">Centos7 安装 node.js 以及遇到的各种问题</a></p>
]]></content>
    <author>
      <name>Memories_white</name>
    </author>
    <category term="教程"></category>
  </entry>
  <entry>
    <title>Markdown 扩展功能</title>
    <link href="https://www.zfps.asia/posts/markdown-extended/" rel="alternate" type="text/html"/>
    <id>https://www.zfps.asia/posts/markdown-extended/</id>
    <published>2024-05-01T00:00:00.000Z</published>
    <updated>2024-11-29T00:00:00.000Z</updated>
    <summary>深入了解Mizuki中的Markdown功能</summary>
    <content type="html"><![CDATA[<h2>GitHub 仓库卡片</h2>
<p>您可以添加动态卡片链接至GitHub仓库，页面加载时，仓库信息会从GitHub API获取。</p>
<p>::github{repo="matsuzaka-yuki/Mizuki"}</p>
<p>使用代码 <code>::github{repo="matsuzaka-yuki/Mizuki"}</code> 创建GitHub仓库卡片。</p>
<pre><code>::github{repo="matsuzaka-yuki/Mizuki"}
</code></pre>
<h2>提示框</h2>
<p>支持以下类型的提示框：<code>note</code> <code>tip</code> <code>important</code> <code>warning</code> <code>caution</code></p>
<p>:::note
突出显示用户即使在快速浏览时也应考虑的信息。
:::</p>
<p>:::tip
帮助用户更成功的可选信息。
:::</p>
<p>:::important
用户成功所需的关键信息。
:::</p>
<p>:::warning
因潜在风险需要用户立即关注的关键内容。
:::</p>
<p>:::caution
行动可能带来的负面后果。
:::</p>
<h3>基础语法</h3>
<pre><code>:::note
突出显示用户即使在快速浏览时也应考虑的信息。
:::

:::tip
帮助用户更成功的可选信息。
:::
</code></pre>
<h3>自定义标题</h3>
<p>提示框的标题可以自定义。</p>
<p>:::note[我的自定义标题]
这是一个带有自定义标题的注释。
:::</p>
<pre><code>:::note[我的自定义标题]
这是一个带有自定义标题的注释。
:::
</code></pre>
<h3>GitHub 语法</h3>
<blockquote>
<p>[!TIP]
<a href="https://github.com/orgs/community/discussions/16925">GitHub语法</a> 同样得到支持。</p>
</blockquote>
<pre><code>&gt; [!NOTE]
&gt; GitHub语法同样得到支持。

&gt; [!TIP]
&gt; GitHub语法同样得到支持。
</code></pre>
<h3>隐藏内容</h3>
<p>您可以在文本中添加隐藏内容。该内容同样支持 <strong>Markdown</strong> 语法。</p>
<p>内容 :spoiler[被隐藏了 <strong>哎呀</strong>]！</p>
<pre><code>内容 :spoiler[被隐藏了 **哎呀**]！</code></pre>
]]></content>
    <author>
      <name>Memories_white</name>
    </author>
    <category term="示例"></category>
  </entry>
  <entry>
    <title>Mizuki 简单使用指南</title>
    <link href="https://www.zfps.asia/posts/guide/" rel="alternate" type="text/html"/>
    <id>https://www.zfps.asia/posts/guide/</id>
    <published>2024-04-01T00:00:00.000Z</published>
    <updated>2024-04-01T00:00:00.000Z</updated>
    <summary>如何使用此博客模板。</summary>
    <content type="html"><![CDATA[<p>此博客模板使用 <a href="https://astro.build/">Astro</a> 构建。本指南未提及的内容，您可以在 <a href="https://docs.astro.build/">Astro 文档</a> 中找到答案。</p>
<h2>文章的前置元数据</h2>
<pre><code>---
title: My First Blog Post
published: 2023-09-09
description: This is the first post of my new Astro blog.
image: ./cover.jpeg
tags: [Foo, Bar]
category: Front-end
draft: false
---
</code></pre>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>title</code></td>
<td>文章的标题。</td>
</tr>
<tr>
<td><code>published</code></td>
<td>文章的发布日期。</td>
</tr>
<tr>
<td><code>pinned</code></td>
<td>是否将此文章置顶于文章列表顶部。</td>
</tr>
<tr>
<td><code>description</code></td>
<td>文章的简短描述。在首页显示。</td>
</tr>
<tr>
<td><code>image</code></td>
<td>文章的封面图片路径。&lt;br/&gt;1. 以 <code>http://</code> 或 <code>https://</code> 开头：使用网络图片&lt;br/&gt;2. 以 <code>/</code> 开头：指向 <code>public</code> 目录中的图片&lt;br/&gt;3. 无上述前缀：相对于 markdown 文件</td>
</tr>
<tr>
<td><code>tags</code></td>
<td>文章的标签。</td>
</tr>
<tr>
<td><code>category</code></td>
<td>文章的分类。</td>
</tr>
<tr>
<td><code>licenseName</code></td>
<td>文章内容的许可证名称。</td>
</tr>
<tr>
<td><code>author</code></td>
<td>文章的作者。</td>
</tr>
<tr>
<td><code>sourceLink</code></td>
<td>文章内容的源链接或参考来源。</td>
</tr>
<tr>
<td><code>draft</code></td>
<td>如果文章仍是草稿，则不会显示。</td>
</tr>
</tbody>
</table>
<h2>文章文件的存放位置</h2>
<p>您的文章文件应放置在 <code>src/content/posts/</code> 目录下。您也可以创建子目录来更好地组织您的文章和资源文件。</p>
<pre><code>src/content/posts/
├── post-1.md
└── post-2/
    ├── cover.png
    └── index.md
</code></pre>
]]></content>
    <author>
      <name>Memories_white</name>
    </author>
    <category term="指南"></category>
  </entry>
  <entry>
    <title>在文章中嵌入视频</title>
    <link href="https://www.zfps.asia/posts/video/" rel="alternate" type="text/html"/>
    <id>https://www.zfps.asia/posts/video/</id>
    <published>2022-08-01T00:00:00.000Z</published>
    <updated>2022-08-01T00:00:00.000Z</updated>
    <summary>本文演示如何在博客文章中嵌入视频。</summary>
    <content type="html"><![CDATA[<p>只需从 YouTube 或其他平台复制嵌入代码，然后粘贴到 markdown 文件中即可。</p>
<pre><code>---
title: 在文章中嵌入视频
published: 2023-10-19
// ...
---

&lt;iframe width="100%" height="468" src="https://www.youtube.com/embed/5gIf0_xpFPI?si=N1WTorLKL0uwLsU_" title="YouTube video player" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe width="100%" height="468" src="//player.bilibili.com/player.html?bvid=BV1vt421V7Pv&amp;autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" &amp;autoplay=0&gt; &lt;/iframe&gt;
</code></pre>
<h2>Bilibili</h2>
<p>&lt;iframe width="100%" height="468" src="//player.bilibili.com/player.html?bvid=BV1vt421V7Pv&amp;autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" &amp;autoplay=0&gt; &lt;/iframe&gt;</p>
<h2>YouTube</h2>
<p>&lt;iframe width="100%" height="468" src="https://www.youtube.com/embed/5gIf0_xpFPI?si=N1WTorLKL0uwLsU_" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen&gt;&lt;/iframe&gt;</p>
]]></content>
    <author>
      <name>Memories_white</name>
    </author>
    <category term="示例"></category>
  </entry>
</feed>